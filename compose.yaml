version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: my-first-backend-db
    environment:
      POSTGRES_DB: my_first_backend_db
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d my_first_backend_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my-first-backend-app
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/my_first_backend_db
      SPRING_DATASOURCE_USERNAME: dev_user
      SPRING_DATASOURCE_PASSWORD: dev_password
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo}
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Adminer para gestión de base de datos (opcional)
  adminer:
    image: adminer:4.8.1
    container_name: my-first-backend-adminer
    ports:
      - "8080:8080"
    networks:
      - backend-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local

networks:
  backend-network:
    driver: bridge