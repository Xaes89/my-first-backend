# --------------------- ETAPA 1: LA F츼BRICA 游낈 ---------------------
# "Empecemos con una m치quina que ya tiene Gradle y Java 21 instalados.
# La llamaremos 'builder' para referirnos a ella m치s tarde."
FROM gradle:8.6.0-jdk21-alpine AS builder

# "Dentro de esa m치quina, creemos una carpeta llamada 'app' y entremos en ella."
WORKDIR /app

# "Copiemos los archivos de configuraci칩n de Gradle y luego el c칩digo fuente."
# (Se hace en dos pasos para que Docker sea m치s r치pido en futuras compilaciones)
COPY build.gradle settings.gradle gradlew /app/
COPY gradle /app/gradle
COPY src /app/src

# 춰LA SOLUCI칍N! Damos permiso de ejecuci칩n al wrapper de Gradle.
RUN chmod +x gradlew

# Ahora s칤, el comando de construcci칩n funcionar치
RUN ./gradlew bootJar --no-daemon

# --------------------- ETAPA 2: EL COCHE 游뚱 ---------------------
# "Ahora, olvid칠monos de la f치brica. Empecemos con una m치quina nueva y limpia
# que solo tiene lo m칤nimo para ejecutar Java (JRE)."
FROM eclipse-temurin:21-jre-alpine

# "Le decimos al mundo que este coche (contenedor) usar치 el puerto 8080."
EXPOSE 8080

# "Vayamos a la f치brica ('builder'), encontremos el archivo .jar que creamos
# (est치 en build/libs/), y copi칠moslo a nuestra m치quina limpia.
# Para que sea m치s f치cil, lo renombraremos a 'app.jar'."
ARG JAR_FILE=build/libs/*.jar
COPY --from=builder /app/${JAR_FILE} app.jar

# "Esta es la instrucci칩n final. Cuando alguien 'encienda' este coche,
# el 칰nico comando que se ejecutar치 ser치 para arrancar nuestra aplicaci칩n
# en modo producci칩n."
ENTRYPOINT ["java", "-Dspring.profiles.active=prod", "-jar", "app.jar"]